// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://challenge:uYuMturLtSasyUig@cluster0.v8ikp.mongodb.net/registry?retryWrites=true&w=majority"
}

model User {
  id                                        String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName                                 String
  lastName                                  String
  email                                     String
  githubId                                  String
  ministry                                  Ministry
  archived                                  Boolean               @default(false)
  created                                   DateTime              @default(now())
  lastSeen                                  DateTime              @updatedAt
  privateCloudProjectOwner                  PrivateCloudProject[] @relation("projectOwner")
  privateCloudProjectPrimaryTechnicalLead   PrivateCloudProject[] @relation("primaryTechnicalLead")
  privateCloudProjectSecondaryTechnicalLead PrivateCloudProject[] @relation("secondaryTechnicalLead")
  privateCloudRequestProjectOwner           PrivateCloudRequest[] @relation("requestProjectOwner")
  privateCloudRequestPrimaryTechnicalLead   PrivateCloudRequest[] @relation("requestPrimaryTechnicalLead")
  privateCloudRequestSecondaryTechnicalLead PrivateCloudRequest[] @relation("requestSecondaryTechnicalLead")
  privateCloudRequestCreatedBy              PrivateCloudRequest?  @relation("createdBy")
  privateCloudRequestDecisionMaker          PrivateCloudRequest?  @relation("decisionMaker")
}

model PrivateCloudProject {
  id                         String               @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  licencePlate               String
  archived                   Boolean
  created                    DateTime             @default(now())
  createdById                String               @db.ObjectId
  description                String
  status                     ProjectStatus
  projectOwnerId             String               @db.ObjectId
  projectOwner               User                 @relation("projectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLeadId     String               @db.ObjectId
  primaryTechnicalLead       User                 @relation("primaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId   String               @db.ObjectId
  secondaryTechnicalLead     User                 @relation("secondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  ministry                   Ministry
  cluster                    Cluster
  productionQuota            Quota
  testQuota                  Quota
  developmentQuota           Quota
  toolsQuota                 Quota
  activeEditRequestId        String               @db.ObjectId
  commonComponents           CommonComponents
  privateCloudRequestProject PrivateCloudRequest? @relation("requestProject")
}

model PrivateCloudRequest {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdById              String                     @unique @db.ObjectId
  createdBy                User                       @relation("createdBy", fields: [createdById], references: [id])
  decisionMakerId          String                     @unique @db.ObjectId
  decisionMaker            User                       @relation("decisionMaker", fields: [decisionMakerId], references: [id])
  projectOwnerId           String                     @db.ObjectId
  projectOwner             User                       @relation("requestProjectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLead     User                       @relation("requestPrimaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  primaryTechnicalLeadId   String                     @db.ObjectId
  secondaryTechnicalLead   User                       @relation("requestSecondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId String                     @db.ObjectId
  type                     RequestType
  status                   RequestStatus
  active                   Boolean
  created                  DateTime                   @default(now())
  decisionDate             DateTime
  projectId                String                     @unique @db.ObjectId
  project                  PrivateCloudProject?       @relation("requestProject", fields: [projectId], references: [id])
  requestedProject         PrivateCloudProjectEmbeded
}

model ArchivedPrivateCloudRequest {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdById              String                     @unique @db.ObjectId
  decisionMakerId          String                     @unique @db.ObjectId
  projectOwnerId           String                     @db.ObjectId
  primaryTechnicalLeadId   String                     @db.ObjectId
  secondaryTechnicalLeadId String                     @db.ObjectId
  type                     RequestType
  status                   RequestStatus
  active                   Boolean
  created                  DateTime                   @default(now())
  decisionDate             DateTime
  projectId                String                     @unique @db.ObjectId
  requestedProject         PrivateCloudProjectEmbeded
}

type PrivateCloudProjectEmbeded {
  name                     String
  licencePlate             String
  archived                 Boolean
  created                  DateTime         @default(now())
  createdById              String           @db.ObjectId
  description              String
  status                   ProjectStatus
  projectOwnerId           String           @db.ObjectId
  primaryTechnicalLeadId   String           @db.ObjectId
  secondaryTechnicalLeadId String           @db.ObjectId
  ministry                 Ministry
  cluster                  Cluster
  productionQuota          Quota
  testQuota                Quota
  developmentQuota         Quota
  toolsQuota               Quota
  activeEditRequestId      String           @db.ObjectId
  commonComponents         CommonComponents
}

type Quota {
  cpu      Cpu
  memory   Memory
  storage  Storage
  snapshot Snapshot
}

type Cpu {
  requests Float @default(0.5)
  limits   Float @default(1.5)
}

type Memory {
  requests Int @default(2)
  limits   Int @default(4)
}

type Storage {
  block    Int @default(1)
  file     Int @default(1)
  backup   Int @default(512)
  capacity Int @default(1)
  pvcCount Int @default(5)
}

type Snapshot {
  count Int @default(5)
}

type CommonComponents {
  addressAndGeolocation              CommonComponentOptions
  workflowManagement                 CommonComponentOptions
  formDesignAndSubmission            CommonComponentOptions
  identityManagement                 CommonComponentOptions
  paymentServices                    CommonComponentOptions
  documentManagement                 CommonComponentOptions
  endUserNotificationAndSubscription CommonComponentOptions
  publishing                         CommonComponentOptions
  businessIntelligence               CommonComponentOptions
  other                              String
}

enum Cluster {
  CLAB
  KLAB
  SILVER
  GOLD
  GOLDDR
  KLAB2
  EMERALD
}

enum CommonComponentOptions {
  IMPLEMENTED
  PLANNING_TO_USE
}

enum Environment {
  PRODUCTION
  TEST
  DEVELOPMENT
  TOOLS
}

enum Platform {
  PRIVATE_CLOUD
  PUBLIC_CLOUD
}

enum ProjectStatus {
  CREATE_REQUEST
  ACTIVE
  INACTIVE
}

enum PublicCloudPlatform {
  GOOGLE
  AWS
}

enum DefaultCpuOptions {
  CPU_REQUEST_0_5_LIMIT_1_5
  CPU_REQUEST_1_LIMIT_2
  CPU_REQUEST_2_LIMIT_4
  CPU_REQUEST_4_LIMIT_8
  CPU_REQUEST_8_LIMIT_16
  CPU_REQUEST_16_LIMIT_32
  CPU_REQUEST_32_LIMIT_64
}

enum DefaultMemoryOptions {
  MEMORY_REQUEST_2_LIMIT_4
  MEMORY_REQUEST_4_LIMIT_8
  MEMORY_REQUEST_8_LIMIT_16
  MEMORY_REQUEST_16_LIMIT_32
  MEMORY_REQUEST_32_LIMIT_64
  MEMORY_REQUEST_64_LIMIT_128
}

enum DefaultStorageOptions {
  STORAGE_1
  STORAGE_2
  STORAGE_4
  STORAGE_16
  STORAGE_32
  STORAGE_64
  STORAGE_124
  STORAGE_256
  STORAGE_512
}

enum RequestDecision {
  APPROVE
  REJECT
}

enum RequestStatus {
  PENDING_DECISION
  APPROVED
  REJECTED
}

enum RequestType {
  CREATE
  EDIT
  DELETE
}

enum SortOrder {
  ASCENDING
  DESCENDING
}

enum Ministry {
  AEST
  AG
  AGRI
  ALC
  BCPC
  CITZ
  DBC
  EAO
  EDUC
  EMBC
  EMPR
  ENV
  FIN
  FLNR
  HLTH
  IRR
  JEDC
  LBR
  LDB
  MAH
  MCF
  MMHA
  PSA
  PSSG
  SDPR
  TCA
  TRAN
}

// datasource db {
//   provider = "mongodb"
//   url      = "mongodb+srv://challenge:uYuMturLtSasyUig@cluster0.v8ikp.mongodb.net/registry?retryWrites=true&w=majority"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Post {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   content String
//   title   String

//   // createdAt DateTime @default(now())
//   // published Boolean
//   // body      String
//   authorId  String   @db.ObjectId
//   author    User     @relation(fields: [authorId], references: [id])
// }

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   name    String?
//   address Address?
//   posts   Post[] // Prisma will resolve this to a list of Post records who's authorId is this user's id
// }

// // Address is an embedded document
// type Address {
//   street String
//   city   String
//   state  String
//   zip    String
// }
