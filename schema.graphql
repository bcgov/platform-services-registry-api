scalar DateTime
scalar EmailAddress

directive @lowerCase on INPUT_FIELD_DEFINITION

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

# Change this to Status
enum DecisionStatus {
  PENDING
  APPROVED
  REJECTED
  PROVISIONED
}

enum RequestDecision {
  APPROVED
  REJECTED
}

enum RequestType {
  CREATE
  EDIT
  DELETE
}

enum Ministry {
  AEST
  AG
  AGRI
  ALC
  BCPC
  CITZ
  DBC
  EAO
  EDUC
  EMBC
  EMPR
  ENV
  FIN
  FLNR
  HLTH
  IRR
  JEDC
  LBR
  LDB
  MAH
  MCF
  MMHA
  PSA
  PSSG
  SDPR
  TCA
  TRAN
}

enum Cluster {
  CLAB
  KLAB
  SILVER
  GOLD
  GOLDDR
  KLAB2
  EMERALD
}

enum Environment {
  PRODUCTION
  TEST
  DEVELOPMENT
  TOOLS
}

enum Platform {
  PRIVATE_CLOUD
  PUBLIC_CLOUD
}

enum PublicCloudPlatform {
  GOOGLE
  AWS
}

enum CommonComponentsOptions {
  IMPLEMENTED
  PLANNING_TO_USE
}

enum DefaultCpuOptions {
  CPU_REQUEST_0_5_LIMIT_1_5
  CPU_REQUEST_1_LIMIT_2
  CPU_REQUEST_2_LIMIT_4
  CPU_REQUEST_4_LIMIT_8
  CPU_REQUEST_8_LIMIT_16
  CPU_REQUEST_16_LIMIT_32
  CPU_REQUEST_32_LIMIT_64
  CPU_REQUEST_64_LIMIT_128
}

enum DefaultMemoryOptions {
  MEMORY_REQUEST_2_LIMIT_4
  MEMORY_REQUEST_4_LIMIT_8
  MEMORY_REQUEST_8_LIMIT_16
  MEMORY_REQUEST_16_LIMIT_32
  MEMORY_REQUEST_32_LIMIT_64
  MEMORY_REQUEST_64_LIMIT_128
}

enum DefaultStorageOptions {
  STORAGE_1
  STORAGE_2
  STORAGE_4
  STORAGE_16
  STORAGE_32
  STORAGE_64
  STORAGE_128
  STORAGE_256
  STORAGE_512
}

enum Provider {
  GOOGLE
  AWS
}

type PrivateCloudProject {
  id: ID!
  name: String!
  licencePlate: ID!
  created: DateTime!
  description: String!
  status: ProjectStatus!
  projectOwner: User!
  primaryTechnicalLead: User!
  secondaryTechnicalLead: User
  ministry: Ministry!
  cluster: Cluster!
  productionQuota: Quota!
  testQuota: Quota!
  developmentQuota: Quota!
  toolsQuota: Quota!
  requestHistory: [PrivateCloudRequest]!
  activeEditRequest: PrivateCloudRequest
  count: Int
  commonComponents: CommonComponents!
}

type PrivateCloudRequest {
  id: ID!
  active: Boolean!
  createdBy: User
  decisionMaker: User
  type: RequestType!
  decisionStatus: DecisionStatus!
  humanComment: String
  created: DateTime!
  decisionDate: DateTime
  project: PrivateCloudProject
  requestedProject: PrivateCloudProject
}

type PublicCloudProject {
  id: ID!
  name: String!
  licencePlate: ID!
  created: DateTime!
  description: String!
  status: ProjectStatus!
  projectOwner: User!
  primaryTechnicalLead: User!
  secondaryTechnicalLead: User
  budget: Budget!
  accountCoding: String!
  ministry: Ministry!
  provider: Provider!
  requestHistory: [PublicCloudRequest]!
  activeEditRequest: PublicCloudRequest
  commonComponents: CommonComponents!
}

type PublicCloudRequest {
  id: ID!
  active: Boolean!
  created: DateTime!
  createdBy: User
  decisionMaker: User
  type: RequestType!
  decisionStatus: DecisionStatus!
  humanComment: String
  decisionDate: DateTime
  project: PublicCloudProject
  requestedProject: PublicCloudProject
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: EmailAddress!
  ministry: String
  archived: Boolean!
  created: DateTime!
  lastSeen: DateTime
  privateCloudProjectOwner: [PrivateCloudProject]!
  privateCloudProjectPrimaryTechnicalLead: [PrivateCloudProject]!
  privateCloudProjectSecondaryTechnicalLead: [PrivateCloudProject]!
  publicCloudProjectOwner: [PublicCloudProject]!
  publicCloudProjectTechnicalLead: [PublicCloudProject]!
  isNew: Boolean
}

input CommonComponentsInput {
  addressAndGeolocation: CommonComponentsOptions
  workflowManagement: CommonComponentsOptions
  formDesignAndSubmission: CommonComponentsOptions
  identityManagement: CommonComponentsOptions
  paymentServices: CommonComponentsOptions
  documentManagement: CommonComponentsOptions
  endUserNotificationAndSubscription: CommonComponentsOptions
  publishing: CommonComponentsOptions
  businessIntelligence: CommonComponentsOptions
  noServices: Boolean!
  other: String
}

type CommonComponents {
  addressAndGeolocation: CommonComponentsOptions
  workflowManagement: CommonComponentsOptions
  formDesignAndSubmission: CommonComponentsOptions
  identityManagement: CommonComponentsOptions
  paymentServices: CommonComponentsOptions
  documentManagement: CommonComponentsOptions
  endUserNotificationAndSubscription: CommonComponentsOptions
  publishing: CommonComponentsOptions
  businessIntelligence: CommonComponentsOptions
  noServices: Boolean!
  other: String
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: EmailAddress! @lowerCase
  ministry: Ministry
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: EmailAddress
  archived: Boolean
  lastSeen: DateTime
  projectOwner: [ID!]
  technicalLead: [ID!]
}

input QuotaInput {
  cpu: DefaultCpuOptions!
  memory: DefaultMemoryOptions!
  storage: DefaultStorageOptions!
}

type Quota {
  cpu: DefaultCpuOptions!
  memory: DefaultMemoryOptions!
  storage: DefaultStorageOptions!
}

type Budget {
  prod: Int!
  test: Int!
  dev: Int!
  tools: Int!
}

input BudgetInput {
  prod: Int!
  test: Int!
  dev: Int!
  tools: Int!
}

input FilterPrivateCloudProjectsInput {
  ministry: Ministry
  cluster: Cluster
}

input FilterPublicCloudProjectsInput {
  ministry: Ministry
  provider: Provider
  accountCoding: String
}

enum SortOrder {
  ASCENDING
  DESCENDING
}

type privateCloudProjectsPaginatedOutput {
  projects: [PrivateCloudProject!]!
  total: Int!
}

type projectsPaginatedOutput {
  projects: [PrivateCloudProject!]!
  total: Int!
}

type publicCloudProjectsPaginatedOutput {
  projects: [PublicCloudProject!]!
  total: Int!
}

type Query {
  me: User @auth
  users: [User!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  user(id: ID!): User @auth @hasRole(role: ["admin", "read-only-admin"])
  usersByIds(ids: [ID!]!): [User!]! @hasRole(role: ["admin", "read-only-admin"])
  userByEmail(email: EmailAddress!): User @auth

  # Private Cloud
  privateCloudProjects: [PrivateCloudProject!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  privateCloudProjectsPaginated(
    page: Int!
    pageSize: Int!
    filter: FilterPrivateCloudProjectsInput
    search: String
    sortOrder: Int
    userId: String
  ): projectsPaginatedOutput! @auth

  userPrivateCloudProjectsPaginated(
    page: Int!
    pageSize: Int!
    filter: FilterPrivateCloudProjectsInput
    search: String
    sortOrder: Int
    userId: String
  ): projectsPaginatedOutput! @auth

  privateCloudProjectsWithFilterSearch(
    filter: FilterPrivateCloudProjectsInput
    search: String
  ): [PrivateCloudProject!]! @auth @hasRole(role: ["admin", "read-only-admin"])

  privateCloudProjectById(projectId: ID!): PrivateCloudProject!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  privateCloudProjectsById(projectIds: [ID!]): [PrivateCloudProject!]!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])

  userPrivateCloudProjects: [PrivateCloudProject!]! @auth
  userPrivateCloudProjectById(projectId: ID!): PrivateCloudProject! @auth
  userPrivateCloudProjectsByIds(projectIds: [ID!]): PrivateCloudProject! @auth

  userPrivateCloudRequests: [PrivateCloudRequest!]! @auth
  userPrivateCloudRequestById(requestId: ID!): PrivateCloudRequest! @auth
  userPrivateCloudActiveRequests: [PrivateCloudRequest!]! @auth
  userPrivateCloudActiveRequestById(requestId: ID!): PrivateCloudRequest! @auth
  userPrivateCloudActiveRequestsByIds(requestIds: [ID!]): PrivateCloudRequest! @auth

  privateCloudRequests: [PrivateCloudRequest!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  privateCloudRequestById(requestId: ID!): PrivateCloudRequest!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  privateCloudActiveRequestById(requestId: ID!): PrivateCloudRequest!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  privateCloudActiveRequests: [PrivateCloudRequest!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  privateCloudActiveRequestsById(requestIds: ID!): [PrivateCloudRequest!]!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])

  # Public Cloud
  publicCloudProjects: [PublicCloudProject!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  publicCloudProjectsPaginated(
    page: Int!
    pageSize: Int!
    filter: FilterPublicCloudProjectsInput
    search: String
    sortOrder: Int
  ): publicCloudProjectsPaginatedOutput! @auth @hasRole(role: ["admin", "read-only-admin"])
  publicCloudProjectById(projectId: ID!): PublicCloudProject!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  publicCloudProjectsById(projectIds: [ID!]): [PublicCloudProject!]!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])

  userPublicCloudProjects: [PublicCloudProject!]! @auth
  userPublicCloudProjectById(projectId: ID!): PublicCloudProject! @auth
  userPublicCloudProjectsByIds(projectIds: [ID!]): PublicCloudProject! @auth

  userPublicCloudRequests: [PublicCloudRequest!]! @auth
  userPublicCloudRequestById(requestId: ID!): PublicCloudRequest! @auth
  userPublicCloudActiveRequests: [PublicCloudRequest!]! @auth
  userPublicCloudActiveRequestById(requestId: ID!): PublicCloudRequest! @auth
  userPublicCloudActiveRequestsByIds(requestIds: [ID!]): PublicCloudRequest! @auth

  publicCloudRequests: [PublicCloudRequest!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  publicCloudRequestById(requestId: ID!): PublicCloudRequest!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  publicCloudActiveRequestById(requestId: ID!): PublicCloudRequest!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
  publicCloudActiveRequests: [PublicCloudRequest!]! @auth @hasRole(role: ["admin", "read-only-admin"])
  publicCloudActiveRequestsById(requestIds: ID!): [PublicCloudRequest!]!
    @auth
    @hasRole(role: ["admin", "read-only-admin"])
}

type Mutation {
  signUp: User! @auth

  createUser(input: CreateUserInput!): User! @auth
  # updateUser(input: UpdateUserInput!): User!

  # Private Cloud
  privateCloudProjectRequest(
    name: String!
    description: String!
    cluster: Cluster!
    ministry: Ministry!
    commonComponents: CommonComponentsInput!
    projectOwner: CreateUserInput!
    primaryTechnicalLead: CreateUserInput!
    secondaryTechnicalLead: CreateUserInput
  ): PrivateCloudRequest! @auth

  privateCloudProjectEditRequest(
    projectId: ID!
    name: String!
    description: String!
    ministry: Ministry!
    commonComponents: CommonComponentsInput!
    projectOwner: CreateUserInput!
    primaryTechnicalLead: CreateUserInput!
    secondaryTechnicalLead: CreateUserInput
    productionQuota: QuotaInput!
    developmentQuota: QuotaInput!
    testQuota: QuotaInput!
    toolsQuota: QuotaInput!
  ): PrivateCloudRequest! @auth

  privateCloudProjectDeleteRequest(projectId: ID!): PrivateCloudRequest! @auth

  privateCloudRequestDecision(
    requestId: ID!
    decision: RequestDecision!
    humanComment: String
  ): PrivateCloudRequest @hasRole(role: "admin")

  privateCloudReProvisionRequest(requestId: ID!): ID @hasRole(role: "admin")

  privateCloudReProvisionProject(projectId: ID!): ID @hasRole(role: "admin")

  # Public Cloud
  publicCloudProjectRequest(
    name: String!
    description: String!
    ministry: Ministry!
    provider: Provider!
    budget: BudgetInput!
    accountCoding: String
    commonComponents: CommonComponentsInput!
    projectOwner: CreateUserInput!
    primaryTechnicalLead: CreateUserInput!
    secondaryTechnicalLead: CreateUserInput
  ): PublicCloudRequest! @auth

  publicCloudProjectEditRequest(
    projectId: ID!
    name: String!
    description: String!
    ministry: Ministry!
    budget: BudgetInput!
    accountCoding: String
    commonComponents: CommonComponentsInput!
    projectOwner: CreateUserInput!
    primaryTechnicalLead: CreateUserInput!
    secondaryTechnicalLead: CreateUserInput
  ): PublicCloudRequest! @auth

  publicCloudRequestDecision(
    requestId: ID!
    decision: RequestDecision!
    humanComment: String
  ): PublicCloudRequest @hasRole(role: "admin")
}
